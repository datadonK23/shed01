inTrain  <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
training  <- spam[inTrain, ]
training  <- faithful[inTrain, ]
testing  <- faithful[-inTrain, ]
head(train)
library(Metrics); library(caret)
data(faithful)
set.seed(333)
inTrain  <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
training  <- faithful[inTrain, ]
testing  <- faithful[-inTrain, ]
head(train)
data(faithful)
set.seed(333)
inTrain  <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
faithTrain  <- faithful[inTrain, ]
faithTesting  <- faithful[-inTrain, ]
head(faithTrain)
library(Metrics); library(caret)
data(faithful)
set.seed(333)
inTrain  <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
faithTrain  <- faithful[inTrain, ]
faithTesting  <- faithful[-inTrain, ]
lm1 <- lm(eruptions ~ waiting, data=faithTrain)
summary(lm1)
plot(faithTrain$waiting, faithTrain$eruptions, pch=19, col="blue",
xlab="Waiting", ylab="Duration")
lines(faithTrain$waiting, lm1$fitted, lwd=3)
newdata  <- data.frame(waiting=80)
predict(lm1, newdata)
par(mfrow=c(1,2))
plot(faithTrain$waiting, faithTrain$eruptions, pch=19, col="blue",
xlab="Waiting", ylab="Duration")
lines(faithTrain$waiting, predict(lm1), lwd=3)
plot(faithTesting$waiting, faithTesting$eruptions, pch=19, col="blue",
xlab="Waiting", ylab="Duration")
lines(faithTesting$waiting, predict(lm1, newdata=faithTesting), lwd=3)
help(rmse)
rmse(faithTrain$eruptions, lm1$fitted)
rmse(lm1$fitted, faithTrain$eruptions)
rmse(faithTrain$eruptions, predict(lm1, newdata=faithTesting))
rmse(faithTesting$eruptions, predict(lm1, newdata=faithTesting))
pred1  <- predict(lm1, newdata=faithTesting, interval="prediction")
ord  <- order(faithTesting$waiting)
plot(faithTesting$waiting, faithTesting$eruptions, pch=19, col="blue")
matlines(faithTesting$waiting[ord], pred1[ord,], type="1", ,
col=c(1,2,3), lty=c(1,1,1), lwd=3)
matlines(faithTesting$waiting[ord], pred1[ord,], type="1", ,col=c(1,2,3), lty=c(1,1,1), lwd=3)
matlines(faithTesting$waiting[ord], pred1[ord,], type=1, ,col=c(1,2,3), lty=c(1,1,1), lwd=3)
help(matlines)
matlines(faithTesting$waiting[ord], pred1[ord,], type="1", col=c(1,2,3), lty=c(1,1,1), lwd=3)
matlines(faithTesting$waiting[ord], pred1[ord,], type="l", col=c(1,2,3), lty=c(1,1,1), lwd=3)
modFit <- train(eruptions ~ waiting, data=faithTrain, method="lm")
summary(modFit$finalModel)
library(caret); library(ISLR)
data(Wage)
inTrain  <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training  <- Wage[inTrain, ]
testing  <- Wage[-inTrain, ]
library(caret); library(ggplot2); library(ISLR)
data(Wage)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
inTrain  <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training  <- Wage[inTrain, ]
testing  <- Wage[-inTrain, ]
dim(training; dim(testing))
dim(training; dim(testing)
dim(training); dim(testing)
library(caret); library(ggplot2); library(ISLR)
data(Wage)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
inTrain  <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training  <- Wage[inTrain, ]
testing  <- Wage[-inTrain, ]
dim(training); dim(testing)
featurePlot(x=trainging[,c("age","education","jobclass")], y=training$wage,
plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage,
plot="pairs")
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod  <- modFit$finalModel
print(modFit)
print(finMod)
print(modFit); print(finMod)
plot(finMod, 1, pch=19, cex=0.5, col="#00000010")
qplot(finMod$fitted, finMod$residuals, colour=race, data=training) # unused V
plot(finMod$residuals, pch=19)
pred  <- predict(modFit, testing)
qplot(wage, pred, colour=year, data=testing)
modFitAll <- train(wage ~ ., data=training, method="lm")
predAll <- predict(modFitAll, testing)
qplot(wage, predAll, data=testing)
modFitAll <- train(wage ~ ., data=training, method="lm")
predAll <- predict(modFitAll, testing)
qplot(wage, predAll, data=testing)
qplot(wage, pred, data=testing)
qplot(wage, predAll, data=testing)
modFitAll <- train(wage ~ ., data=training, method="lm")
predAll <- predict(modFitAll, testing)
qplot(wage, predAll, data=testing)
library(AppliedPredictiveModeling)
library(caret)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData <- data.frame(predictors)
str(adData)
adData <- data.frame(diagnosis,predictors)
str(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
library(Hmisc)
help(cut2)
dataTrain  <- sapply(training, cut2)
dataTrain
str(dataTrain)
dataTrain  <- lapply(training, cut2)
str(dataTrain)
help(qplot)
qplot(CompressiveStrength, c(cement,BlastFurnaceSlag,FlyAsh,Water,Superplasticizer,
CoarsAggregate,FineAggregate,Age), data=dataTrain)
qplot(CompressiveStrength, cement, data=dataTrain)
qplot(dataTrain$CompressiveStrength, cement, data=dataTrain)
qplot(dataTrain$CompressiveStrength, dataTrain$cement, data=dataTrain)
help(plot)
plot(dataTrain$CompressiveStrength, dataTrain$cement)
plot(dataTrain$CompressiveStrength, dataTrain$BlastFurnaceSlag)
str(dataTrain)
help(lapply)
dataTrain  <- lapply(training, cut2, g=2)
str(dataTrain)
dataTrain  <- lapply(training, cut2, g=2)
str(dataTrain)
plot(dataTrain$CompressiveStrength, dataTrain$BlastFurnaceSlag)
qplot(CompressiveStrength, c(Cement,BlastFurnaceSlag,FlyAsh,Water,Superplasticizer,
CoarsAggregate,FineAggregate,Age), data=dataTrain)
qplot(CompressiveStrength, Cement, data=dataTrain)
qplot(dataTrain$CompressiveStrength, Cement, data=dataTrain)
qplot(dataTrain$CompressiveStrength, dataTrain$Cement, data=dataTrain)
qplot(dataTrain$CompressiveStrength, dataTrain$Cement)
str(training)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(caret)
adData  <- data.frame(diagnosis, predictors)
str(adData)
adData  <- data.frame(predictors)
str(adData)
library(ggplot2)
data(iris)
names(iris)
inTrain  <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training  <- iris[inTrain, ]
testing  <- iris[-inTrain, ]
inTrain  <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret); library(ggplot2)
data(iris)
inTrain  <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training  <- iris[inTrain, ]
testing  <- iris[-inTrain, ]
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~ ., method="rpart". data=training)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
plot(modFit$finalModel, uniform=FALSE, main="Classification Tree")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.5)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.5)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=1)
text(modFit$finalModel, use.n=TRUE, all=TRUE)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
install.packages("ElemStatLearn")
library(caret); library(ElemStatLearn)
data(ozone, package="ElemStatLearn")
head(ozone)
predictors <- data.frame(ozone=ozone$ozone)
temperature  <- ozone$temperature
predictors <- data.frame(ozone=ozone$ozone)
temperature  <- ozone$temperature
treebag <- bag(predictors, temperature, B=10, bagControl=bagControl(
fit = ctreeBag$fit, predict=ctreeBag$pred, aggregate=ctreeBag$aggregate))
install.packages("party")
library(caret); library(ElemStatLearn)
data(ozone, package="ElemStatLearn")
predictors <- data.frame(ozone=ozone$ozone)
temperature  <- ozone$temperature
treebag <- bag(predictors, temperature, B=10, bagControl=bagControl(
fit = ctreeBag$fit, predict=ctreeBag$pred, aggregate=ctreeBag$aggregate))
summary(treebag)
print(treebag)
summary(treebag)
library(caret); library(ggplot2)
data(iris)
inTrain  <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training  <- iris[inTrain,]
testing  <- iris[-inTrain,]
modFit <- train(Species ~ ., data=training, method="rf", prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
irisP <- classCenter(training[,c(3,4)], training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP <- classCenter(training[,c(3,4)], training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species  <- rownames(irisP)
p  <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species),
size=5, shape=4, data=irisP)
pred  <- predict(modFit, testing)
testing$predRight  <- pred == testing$Species
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length, col=predRight, data=testing,
main="newdata Prediction")
library(caret); library(ggplot2); library(ISLR)
data(Wage); Wage <- subset(Wage, select=-c(logwage))
inTrain  <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training  <- Wage[inTrain,]
testing  <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm", data=training, verbose=FALSE)
library(caret); library(ggplot2); library(ISLR)
data(Wage); Wage <- subset(Wage, select=-c(logwage))
inTrain  <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training  <- Wage[inTrain,]
testing  <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm", data=training, verbose=FALSE)
print(modFit)
qplot(predict(modFit, testing), wage, data=testing)
library(caret); library(ggplot2)
data(iris)
inTrain  <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training  <- iris[inTrain,]
testing  <- iris[-inTrain,]
modLDA  <- train(Species ~ ., data=training, method="lda")
modNB  <- train(Species ~ ., data=training, method="nb")
plda  <- predict(modLDA, testing)
pnb <- predict(modNB, testing)
table(plda, pnb)
equalPredictions <- (plda == pnb)
qplot(Petal.Width, Sepal.Width, colour=equalPredictions, data=testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
head(segmentationOriginal$Case)
help(createDataPartition)
inTrain  <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
inTrain  <- createDataPartition(y=segmentationOriginal$Case, list=FALSE)
training  <- segmentationOriginal[inTrain, ]
testing  <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
predict(modFit, newdata=testing)
help(predict)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
inTrain  <- createDataPartition(y=segmentationOriginal$Case, p=0.7 list=FALSE)
training  <- segmentationOriginal[inTrain, ]
testing  <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
predict(modFit, newdata=testing)
predict(modFit, newdata=testing$FiberWidthCh1)
str(segmentationOriginal)
tail(str(segmentationOriginal))
str(segmentationOriginal$VarIntenCh4)
str(segmentationOriginal$TotalIntenCh2)
str(segmentationOriginal$Class)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
inTrain  <- createDataPartition(y=segmentationOriginal$Class, p=0.7 list=FALSE)
inTrain  <- createDataPartition(y=segmentationOriginal$Class, p=0.7, list=FALSE)
training  <- segmentationOriginal[inTrain, ]
testing  <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
predict(modFit, testing)
inTrain  <- createDataPartition(y=segmentationOriginal$Class, p=0.7, list=FALSE)
data(segmentationOriginal)
inTrain  <- createDataPartition(y=segmentationOriginal$Class, p=0.7, list=FALSE)
training  <- segmentationOriginal[inTrain, ]
testing  <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
predict(modFit, testing)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(caret); library(ElemStatLearn)
data(prostata)
data(prostate)
small = prostate[1:5,]
lm(lpsa ~ ., data=small)
library(ISLR); library(caret); library(ggplot2)
data(wage)
data(Wage)
Wage  <- subset(Wage, select=-c(logwage))
library(ISLR); library(caret); library(ggplot2)
data(Wage)
Wage  <- subset(Wage, select=-c(logwage))
inBuild  <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
validation <- Wage[-inBuild,]; buildData <- Wage[inBuild,]
inTrain  <- createDataPartition(y=buildData$wage, p=0.7, list=FALSE)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
dim(training)
mod1 <- train(wage ~ ., method"glm", data=training)
mod1 <- train(wage ~ ., method="glm", data=training)
mod2 <- train(wage ~ ., method="rf", data=training,
trControl=trainControl(method="cv"), number=3)
pred1 <- predict(mod1, testing); pred2 <- predict(mod2, testing)
qplot(pred1, pred2, colour=wage, data=testing)
predDF <- data.frame(pred1, pred2, wage=testing$wage)
combModFit <- train(wage ~ ., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
sqrt(sum((pred1-testing$wage)^2))
sqrt(sum((pred2-testing$wage)^2))
sqrt(sum((combPred-testing$wage)^2))
library(caret); library(ggplot2)
data(iris)
inTrain  <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training  <- iris[inTrain, ]
testing  <- iris[-inTrain, ]
kMeans1 <-  kmeans(subset(training, select=-c(Species)), center=3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width, Petal.Length, colour=clusters, data=training)
table(kMeans1$cluster, training$Species)
modFit <- train(clusters ~ ., data=subset(training, select=-c(Species)),
method="rpart")
table(predict(modFit, training), training$Species)
testClusterPred <- predict(modFit, testing)
table(testClusterPred, testing$Species)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/12", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
library(quantmod), library(caret)
library(quantmod); library(caret)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
# Summarize monthly and store as time series
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(training)
library(caret);
data <- read.csv("/mnt/lw_benutzer/MOOC/PracticalML/PracticalML_Coursera/data/pml-training.csc")
data <- read.csv("/mnt/lw_benutzer/MOOC/PracticalML/PracticalML_Coursera/data/pml-training.csv")
data <- read.csv("./data/pml-training.csv")
data <- read.csv("/data/pml-training.csv")
data <- read.csv("./data/pml-training.csv")
data <- read.csv("pml-training.csv")
data <- read.csv("./pml-training.csv")
install.packages("shiny")
install.packages("googleVis")
library(googlevis)
library(googleVis)
demo(googleVis)
install.packages("devtools")
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
library(plotly)
set_credentials_file(username="datadonk23", api_key="m0fov6e7lk")
py <- plotly()
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
r <- py$ggplotly(ggiris)
r$response$url
getwd()
counties <- readRDS("shiny/census-app/data/counties.rds")
head(counties)
install.packages("maps")
install.packages("mapproj")
library(maps)
library(mapproj)
source("shiny/census-app/helpers.R")
counties <- readRDS("shiny/census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
head(counties)
head(counties, n=50)
runapp("census-app")
runapp("shiny/census-app")
runApp("census-app")
library(shiny)
runApp("census-app")
runApp("shiny/census-app")
percent_map(counties$white, "darkgreen", "% white")
help(percent_map)
help(maps)
??maps
map()
map("Europe")
map("Italy")
map("italy")
map("austria")
map("europe")
map("world")
map.text("world", "ira")
map.text("world", "austria")
map.text("world", c("germany",austria"))
)
""
map.text("world", c("germany","austria"))
map("world", c("germany","austria"))
dach  <- c("germany", "austria", "switzerland")
map("world", dach)
map("at")
map("world", "at")
cities  <- data(world.cities)
head(cities)
map.cities(world.cities)
map("world", "austria")
map.cities(world.cities)
head(world.cities)
austrianCities  <- subset(world.cities, country.etc = "Austria")
austrianCities
?subset
head(austrianCities)
austrianCities  <- subset(world.cities, country.etc == "Austria")
head(austrianCities)
austrianCities
Acity  <- subset(austrianCities, po > 25000)
Acity  <- subset(austrianCities, pop > 25000)
Acity
map("world", "austria")
map.cities("world", "austria", "Steyr")
?map.cities
map.cities("world", "austria")
map("world", "austria")
map.cities(Acity)
map("world", "austria")
map.cities(Acity$name == "Steyr")
library(maps)
library(mapproj)
data <- read.csv("data/data_socIndDACH.csv")
library(maps)
library(mapproj)
map("world", "norway", fill=TRUE, col="blue")
map("world", "sweden", fill=TRUE, col="blue")
map("world", "denmark", fill=TRUE, col="blue")
install.packages('devtools')
setwd("/mnt/lw_benutzer/GitHub/rBeispiele_Shed01/shinyMig_UpperAT/")
library(shiny)
runApp()
deployApp()
library(shinyapps)
deployApp()
